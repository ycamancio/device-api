# This stage uses a full JDK to compile and package your application
FROM eclipse-temurin:21-jdk-alpine as builder

# Set the working directory inside the container
WORKDIR /app

# Copy Maven project files first to leverage Docker cache for dependencies
COPY pom.xml .
COPY mvnw .
COPY .mvn .mvn

# Make the Maven wrapper executable
RUN chmod +x mvnw

# Download project dependencies. This step will be cached.
RUN ./mvnw dependency:go-offline -B

# Copy the source code
COPY src ./src

# Package the application into a JAR file.
# For now, it only works skipping tests because Spring Boot tries to connect to the db that doesn't exist
#in the container (by the time the tests are running)
RUN ./mvnw clean package -DskipTests


FROM eclipse-temurin:21-jre-alpine

# Set the working directory for the final application
WORKDIR /app

# Copy the JAR file using a wildcard to avoid naming issues
COPY --from=builder /app/target/*.jar app.jar

# Expose the port your Spring Boot application listens on
EXPOSE 8080

# Command to run your application. Using the 'exec' form is recommended.
CMD ["java", "-jar", "app.jar"]